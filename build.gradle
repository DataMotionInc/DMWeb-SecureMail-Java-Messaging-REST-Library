buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.datamotion'
version = 'version-num'

description = "Java SecureMail REST Messaging SDK for DatMotion"

sourceCompatibility = 1.8
targetCompatibility = 1.8



repositories {   
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.9.6'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.5'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.4.9'
    compile group: 'commons-io', name: 'commons-io', version:'2.6'
    compile group: 'org.apache.tika', name: 'tika-core', version:'1.18'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.projectlombok', name: 'lombok', version:'1.18.2'
    compileOnly group: 'org.projectlombok', name: 'lombok', version:'1.18.2'
}

publishing {
	task sourceJar(type: Jar, dependsOn: classes) {
		classifier 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
	publications {
		JarWithSources(MavenPublication) {
			from components.java
			artifact sourceJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			url "${project.version.endsWith('-SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/' }"
			credentials {
				username project.mavenUser
				password project.mavenPass
			}
		}
	}
}

test {
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}
	onOutput { descriptor, event ->
    	logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  	}
  	System.out.println 'Starthing the Unit and Integration test'
  	filter {
  		includeTestsMatching "*TestSuite*"
  	}  	
}